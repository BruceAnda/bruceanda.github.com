[{"title":"如何解决问题","date":"2017-06-18T07:59:13.000Z","path":"2017/06/18/如何解决问题/","text":"开发中如何解决问题 官方文档 搜索引擎 google，bing，so.com,百度 技术交流论坛 技术文档平台 stackoverflow 源码分享网站 Github，OSChina","tags":[]},{"title":"9.IOS混合编程","date":"2017-06-18T02:50:47.000Z","path":"2017/06/18/9-IOS混合编程/","text":"","tags":[]},{"title":"8.IOS网络与通信","date":"2017-06-18T02:50:35.000Z","path":"2017/06/18/8-IOS网络与通信/","text":"","tags":[]},{"title":"7.IOS多媒体","date":"2017-06-18T02:50:12.000Z","path":"2017/06/18/7-IOS多媒体/","text":"","tags":[]},{"title":"6.IOS数据存储","date":"2017-06-18T02:49:53.000Z","path":"2017/06/18/6-IOS数据存储/","text":"Sandbox（IOS应用沙盒）","tags":[]},{"title":"5.IOS系统功能","date":"2017-06-18T02:49:38.000Z","path":"2017/06/18/5-IOS系统功能/","text":"","tags":[]},{"title":"4.IOS界面优化","date":"2017-06-18T02:49:23.000Z","path":"2017/06/18/4-IOS界面优化/","text":"","tags":[]},{"title":"3.IOS用户界面","date":"2017-06-18T02:49:02.000Z","path":"2017/06/18/3-IOS用户界面/","text":"","tags":[]},{"title":"2.Swift编程语言","date":"2017-06-18T02:48:47.000Z","path":"2017/06/18/2-Swift编程语言/","text":"","tags":[]},{"title":"1.IOS快速入门","date":"2017-06-18T02:48:15.000Z","path":"2017/06/18/1-IOS快速入门/","text":"IOS开发快速入门1. 环境安装在App Store 中搜索XCode 获取安装 2. 使用XCode创建项目使用XCode创建Single View Application。XCode不仅可以创建IOS应用也可以创建watchOS、tvOS、macOS等系统应用，创建这些项目开始都差不多，可以自己尝试一下。 3. 使用模拟器运行程序模拟器是个好东西，可以模拟不同屏幕版本的IPhone手机，我们可以使用模拟器测试我们开发的项目 4. 将程序发布到App Store将程序发布到App Store中让更多人使用我们的应用，这个步骤我们就要交钱了，苹果个人开发者账号每年99美刀，企业开发账号每年299美刀。呵呵，这个过程大家自己注册去缴费就可以啦。","tags":[]},{"title":"1.豆瓣FM","date":"2017-06-18T02:47:54.000Z","path":"2017/06/18/1-豆瓣FM/","text":"","tags":[]},{"title":"11.Map","date":"2017-06-16T09:27:33.000Z","path":"2017/06/16/11.Map/","text":"","tags":[]},{"title":"10.Location And Sensor","date":"2017-06-16T09:27:04.000Z","path":"2017/06/16/10.Location-And-Sensor/","text":"","tags":[]},{"title":"9.Media","date":"2017-06-16T09:26:33.000Z","path":"2017/06/16/9.Media/","text":"","tags":[]},{"title":"8.Animation","date":"2017-06-16T09:26:15.000Z","path":"2017/06/16/8.Animation/","text":"","tags":[]},{"title":"7.ContentProvider","date":"2017-06-16T09:25:47.000Z","path":"2017/06/16/7.ContentProvider/","text":"","tags":[]},{"title":"6.BroadCast","date":"2017-06-16T09:25:22.000Z","path":"2017/06/16/6.BroadCast/","text":"","tags":[]},{"title":"5.Service","date":"2017-06-16T09:25:06.000Z","path":"2017/06/16/5.Service/","text":"","tags":[]},{"title":"4.Activity","date":"2017-06-16T09:24:47.000Z","path":"2017/06/16/4.Activity/","text":"","tags":[]},{"title":"3.Android Storage","date":"2017-06-16T09:24:28.000Z","path":"2017/06/16/3.Android-Storage/","text":"","tags":[]},{"title":"2.Android UI","date":"2017-06-16T09:24:00.000Z","path":"2017/06/16/2.Android-UI/","text":"","tags":[]},{"title":"1.Android Quick Start","date":"2017-06-16T09:21:00.000Z","path":"2017/06/16/1.Android-Quick-Start/","text":"Android开发快速入门Demos，这些列子都是在0.Develop Android App的项目基础上建立的.源码 1. 快速入门主界面列表 布局文件和Kotlin代码如下： &lt;!-- 列表界面布局 --&gt; &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; &lt;FrameLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; xmlns:tools=&quot;http://schemas.android.com/tools&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot;&gt; &lt;ListView android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; android:id=&quot;@+id/list_view&quot;/&gt; &lt;/FrameLayout&gt; package com.example.zhaoliang.learnandroid.activities.quickstart import android.content.Intent import android.os.Bundle import android.view.View import android.widget.AdapterView import com.example.zhaoliang.learnandroid.R import com.example.zhaoliang.learnandroid.activities.base.BaseListBackActivity import com.example.zhaoliang.learnandroid.activities.quickstart.ui.HelloWorldActivity import com.example.zhaoliang.learnandroid.activities.quickstart.ui.SimpleDownloadUIActivity /** * 需求：快速入门的一些列子，以后有新的demo直接在这里写 */ class QuickStartActivity : BaseListBackActivity() { override fun onCreate(savedInstanceState: Bundle?) { super.onCreate(savedInstanceState) // 设置标题 title = getString(R.string.quick_start_title) } /** * 列表项点击事件 */ override fun onItemClick(parent: AdapterView&lt;*&gt;?, view: View?, position: Int, id: Long) { when (position) { 0 -&gt; startActivity(Intent(this, HelloWorldActivity::class.java)) 1 -&gt; startActivity(Intent(this, SimpleDownloadUIActivity::class.java)) else -&gt; println(&quot;unkown&quot;) } } /** * 填充列表项数据 */ override fun fillData(): Array&lt;out String&gt;? { return resources.getStringArray(R.array.QucikStartDatas) } } 2. HelloWorld 布局文件和Kotlin代码如下： &lt;!-- HelloWorld布局 --&gt; &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; &lt;RelativeLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; xmlns:tools=&quot;http://schemas.android.com/tools&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; tools:context=&quot;com.example.zhaoliang.learnandroid.activities.quickstart.ui.HelloWorldActivity&quot;&gt; &lt;TextView android:id=&quot;@+id/textView&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:layout_centerInParent=&quot;true&quot; android:text=&quot;@string/quick_start_values1&quot; /&gt; &lt;/RelativeLayout&gt; package com.example.zhaoliang.learnandroid.activities.quickstart.ui import android.os.Bundle import com.example.zhaoliang.learnandroid.R import com.example.zhaoliang.learnandroid.activities.base.BaseActivity import com.example.zhaoliang.learnandroid.activities.base.BastBackActivity /** * 需求：在屏幕上显示HelloWorld */ class HelloWorldActivity : BastBackActivity() { override fun onCreate(savedInstanceState: Bundle?) { super.onCreate(savedInstanceState) setContentView(R.layout.activity_hello_world) // 设置标题 title = getString(R.string.quick_start_title1) } } 3. SimpleDownloadUI 布局文件和Kotlin代码如下： &lt;!-- SimpleDownloadUI布局 --&gt; &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; &lt;RelativeLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; xmlns:tools=&quot;http://schemas.android.com/tools&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; tools:context=&quot;com.example.zhaoliang.learnandroid.activities.quickstart.ui.SimpleDownloadUIActivity&quot;&gt; &lt;Button android:id=&quot;@+id/btnDownload&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:layout_centerInParent=&quot;true&quot; android:text=&quot;@string/qucik_start_values2&quot; /&gt; &lt;/RelativeLayout&gt; package com.example.zhaoliang.learnandroid.activities.quickstart.ui import android.os.Bundle import android.view.View import android.widget.Toast import com.example.zhaoliang.learnandroid.R import com.example.zhaoliang.learnandroid.activities.base.BaseActivity import com.example.zhaoliang.learnandroid.activities.base.BastBackActivity import kotlinx.android.synthetic.main.activity_simple_download_ui.* /** * 需求：简单的模拟下载界面,界面上有一个按钮，点击以后屏幕上弹出下载字样，同时按钮显示下载中。。。 */ class SimpleDownloadUIActivity : BastBackActivity(), View.OnClickListener { /** * 下载按钮点击事件 */ override fun onClick(v: View?) { // Toast Toast.makeText(this, getString(R.string.qucik_start_values2), Toast.LENGTH_SHORT).show() // 修改按钮文字 btnDownload.text = getString(R.string.quick_start_values3) } override fun onCreate(savedInstanceState: Bundle?) { super.onCreate(savedInstanceState) setContentView(R.layout.activity_simple_download_ui) // 设置标题 title = getString(R.string.quick_start_title2) // 给下载按钮设置点击事件 btnDownload.setOnClickListener(this) } }","tags":[{"name":"Android, HelloWorld, QuickStart, Kotlin","slug":"Android-HelloWorld-QuickStart-Kotlin","permalink":"http://zhaoliang.com/tags/Android-HelloWorld-QuickStart-Kotlin/"}]},{"title":"0.Develop Android App","date":"2017-06-15T14:17:53.000Z","path":"2017/06/15/0.Develop-Android-App/","text":"使用Kotlin开发Android App这个项目是使用Kotlin编写Android的一些Demo的集合，我会不断完善并更新博客，源码,欢迎大家来互动！ 1. 创建Kotlin的Android项目1. 下载Android Studio 3.0 或者在3.0以下版本安装Kotlin插件 2. 在Kotlin Android开发环境准备好以后，我们就可以开发Kotlin的Android程序了 3. 打开Android Studio选择Start A New Android Studio Project 4. 填写一些项目的基本信息Application Name 项目名称，这里自己写一个项目名称；Company Domain 公司域名，一般是***.***.com; Package Name 包名，这里是公司域名倒过来加上项目名称组合而成，我们不需要修改，保持默认就好；在Include Kotlin Support的多选框前点击选中，表示我们使用Kotlin语言开发；Project Location 项目在硬盘上的位置，我们在一个工作盘新建一个目录，用来保存我们的代码，把学习的代码都放在这里，等积累一定量以后可以保存到网盘里，当然我这里就直接上传到Github了，根据自己的喜好选择一种存储方式。点击Next。 5. 选择支持的平台，我选择的是Phone And Tablet就是支持手机和Pad，Minimum SDK 这里在2017年选择API16应该就可以兼容大多数版本了，4.0以下的手机应该极少了，基本都在5.0以上吧。点击Next。 6. Add an Activity to Mobile 添加一个Activity界面，这里我们选择EmptyActivity就可以了，有兴趣可以尝试其他Activity，编程就需要去尝试。点击Next。 7. 给Activity和Layout取名字，这里保持默认MainActivity就好。点击Finish完成项目创建。 8. 以下是我操作过程中的一些截图，有问题可以和我交流。关于里面有我的联系方式。 2. 在项目中创建一个app的目录然后创建一个App的Kotlin类 3. 创建一个BaseActivity和一个BaseListActivity 4. 项目源码 布局文件 &lt;!-- 列表布局文件 --&gt; &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; &lt;FrameLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; xmlns:tools=&quot;http://schemas.android.com/tools&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot;&gt; &lt;ListView android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; android:id=&quot;@+id/list_view&quot;/&gt; &lt;/FrameLayout&gt; App package com.example.zhaoliang.learnandroid.app import android.app.Application /** * 应用程序 * Created by zhaoliang on 2017/6/15. */ class App : Application() { override fun onCreate() { super.onCreate() } } BaseActivity package com.example.zhaoliang.learnandroid.activities.base import android.support.v7.app.AppCompatActivity /** * 基类Activity，做一些共同的操作 */ abstract class BaseActivity : AppCompatActivity() { } BaseListActivity package com.example.zhaoliang.learnandroid.activities.base import android.os.Bundle import android.widget.AdapterView import android.widget.ArrayAdapter import com.example.zhaoliang.learnandroid.R import kotlinx.android.synthetic.main.activity_main.* /** * 基类列表Activity */ abstract class BaseListActivity : BaseActivity(), AdapterView.OnItemClickListener { override fun onCreate(savedInstanceState: Bundle?) { super.onCreate(savedInstanceState) setContentView(R.layout.activity_main) list_view.adapter = ArrayAdapter&lt;String&gt;(this, android.R.layout.simple_list_item_1, fillData()) list_view.onItemClickListener = this } /** * 填充列表数据 */ abstract fun fillData(): Array&lt;out String&gt;? } BaseListBackActivity package com.example.zhaoliang.learnandroid.activities.base import android.os.Bundle import android.view.MenuItem /** * 带返回的BaseListActivity * Created by zhaoliang on 2017/6/16. */ abstract class BaseListBackActivity : BaseListActivity() { override fun onCreate(savedInstanceState: Bundle?) { super.onCreate(savedInstanceState) supportActionBar!!.setDisplayHomeAsUpEnabled(true) } override fun onOptionsItemSelected(item: MenuItem?): Boolean { when (item!!.itemId) { android.R.id.home -&gt; finish() } return true } } MainActivity package com.example.zhaoliang.learnandroid.activities import android.content.Intent import android.view.View import android.widget.AdapterView import com.example.zhaoliang.learnandroid.R import com.example.zhaoliang.learnandroid.activities.base.BaseListActivity import com.example.zhaoliang.learnandroid.activities.quickstart.QuickStartActivity class MainActivity : BaseListActivity() { /** * 填充主界面列表数据 */ override fun fillData(): Array&lt;out String&gt;? { return resources.getStringArray(R.array.MainListDatas) } /** * 主界面列表项点击事件 */ override fun onItemClick(parent: AdapterView&lt;*&gt;?, view: View?, position: Int, id: Long) { when (position) { 0 -&gt; startActivity(Intent(this, QuickStartActivity::class.java)) 1 -&gt; println(&quot;你点击了&quot; + position) 2 -&gt; println(&quot;你点击了&quot; + position) 3 -&gt; println(&quot;你点击了&quot; + position) 4 -&gt; println(&quot;你点击了&quot; + position) 5 -&gt; println(&quot;你点击了&quot; + position) 6 -&gt; println(&quot;你点击了&quot; + position) 7 -&gt; println(&quot;你点击了&quot; + position) 8 -&gt; println(&quot;你点击了&quot; + position) 9 -&gt; println(&quot;你点击了&quot; + position) 10 -&gt; println(&quot;你点击了&quot; + position) else -&gt; { println(&quot;特殊情况&quot;) } } } } 字符数据源 &lt;!-- 主界面列表数据 --&gt; &lt;string-array name=&quot;MainListDatas&quot;&gt; &lt;item&gt;快速入门&lt;/item&gt; &lt;item&gt;UI&lt;/item&gt; &lt;item&gt;数据存储&lt;/item&gt; &lt;item&gt;Activity&lt;/item&gt; &lt;item&gt;Service&lt;/item&gt; &lt;item&gt;ContentProvider&lt;/item&gt; &lt;item&gt;BroadCast&lt;/item&gt; &lt;item&gt;消息和异步任务&lt;/item&gt; &lt;item&gt;动画&lt;/item&gt; &lt;item&gt;多媒体&lt;/item&gt; &lt;/string-array&gt; AndroidManifest &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; &lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; package=&quot;com.example.zhaoliang.learnandroid&quot;&gt; &lt;application android:name=&quot;.app.App&quot; android:allowBackup=&quot;true&quot; android:icon=&quot;@mipmap/ic_launcher&quot; android:label=&quot;@string/app_name&quot; android:roundIcon=&quot;@mipmap/ic_launcher_round&quot; android:supportsRtl=&quot;true&quot; android:theme=&quot;@style/AppTheme&quot;&gt; &lt;activity android:name=&quot;.activities.MainActivity&quot;&gt; &lt;intent-filter&gt; &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt; &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt; &lt;/intent-filter&gt; &lt;/activity&gt; &lt;/application&gt; &lt;/manifest&gt; 5. 总结在这里我创建了一个最基本的Kotlin的Android项目，在项目中创建一个基本的Activity将来可以封装一些共用的方法，一个BaseListActivity做列表基类，一个BaseListBackActivity做返回的列表基类。以后慢慢丰富这个demo。","tags":[{"name":"Kotlin, Android, ArrayAdapter, ListView","slug":"Kotlin-Android-ArrayAdapter-ListView","permalink":"http://zhaoliang.com/tags/Kotlin-Android-ArrayAdapter-ListView/"}]}]