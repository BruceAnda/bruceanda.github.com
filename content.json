[{"title":"步态分析","date":"2017-07-13T08:11:15.000Z","path":"2017/07/13/步态分析/","text":"Android设备步态分析软件1. 概述手机上的运行效果图如下（实现思路1.编写界面和事件处理；2.收集加速度数据写入到文件中；3.使用libSVM训练Model；4.把model应用于真实的数据识别） 源码 2. 环境准备 操作系统：Windows、Mac OS、 Linux均可 安装JDK，Android开发工具需要有JDK环境才能运行，所有要先安装JDK（下载地址） 下载JDK8 安装Android Studio（Android开发工具，可以编写Android程序并在设备上运行）(下载地址) 下载Android Studio 3.0 安装下载好的软件 3. 创建项目打开Android Stuido，点击Start a new Android Studio project,然后按照下图一步一步操作就可以完成Android项目的创建。 4. 创建虚拟机按照下图操作创建Android虚拟设备并运行 5. 在虚拟机上运行项目按照下图操作把项目在模拟器或真实设备上运行起来 6. 把项目分享到Github上 7. 布局代码&lt;!-- 布局代码 --&gt; &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; &lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; xmlns:tools=&quot;http://schemas.android.com/tools&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; android:keepScreenOn=&quot;true&quot; android:orientation=&quot;vertical&quot; tools:context=&quot;cn.zhaoliang5156.svmprjo.MainActivity&quot;&gt; &lt;TextView android:id=&quot;@+id/tv_train_num&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;wrap_content&quot; android:gravity=&quot;center_horizontal&quot; android:text=&quot;采集样本数量&quot; android:textSize=&quot;20sp&quot; /&gt; &lt;RadioGroup android:id=&quot;@+id/rg_train_num&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;wrap_content&quot; android:gravity=&quot;center_horizontal&quot; android:orientation=&quot;horizontal&quot;&gt; &lt;RadioButton android:id=&quot;@+id/rb_train_num_one&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:text=&quot;30&quot; /&gt; &lt;RadioButton android:id=&quot;@+id/rb_train_num_two&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:text=&quot;50&quot; /&gt; &lt;RadioButton android:id=&quot;@+id/rb_train_num_three&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:text=&quot;100&quot; /&gt; &lt;/RadioGroup&gt; &lt;TextView android:id=&quot;@+id/tv_lable&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;wrap_content&quot; android:gravity=&quot;center_horizontal&quot; android:text=&quot;标记动作&quot; android:textSize=&quot;20sp&quot; /&gt; &lt;RadioGroup android:id=&quot;@+id/rg_lable&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;wrap_content&quot; android:gravity=&quot;center_horizontal&quot; android:orientation=&quot;horizontal&quot;&gt; &lt;RadioButton android:id=&quot;@+id/rb_lable_one&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:text=&quot;静止(0)&quot; /&gt; &lt;RadioButton android:id=&quot;@+id/rb_lable_two&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:text=&quot;走路(1)&quot; /&gt; &lt;RadioButton android:id=&quot;@+id/rb_lable_three&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:text=&quot;跑步(2)&quot; /&gt; &lt;/RadioGroup&gt; &lt;TextView android:id=&quot;@+id/tv_acc&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;wrap_content&quot; android:gravity=&quot;center&quot; android:textSize=&quot;20sp&quot; /&gt; &lt;TextView android:id=&quot;@+id/tv_collection_num&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;wrap_content&quot; android:gravity=&quot;center_horizontal&quot; android:text=&quot;已经采集：&quot; /&gt; &lt;TextView android:id=&quot;@+id/tv_accuracy&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;wrap_content&quot; android:gravity=&quot;center_horizontal&quot; android:text=&quot;准确率&quot; /&gt; &lt;LinearLayout android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;wrap_content&quot; android:gravity=&quot;center&quot; android:orientation=&quot;horizontal&quot;&gt; &lt;LinearLayout android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:gravity=&quot;center&quot; android:orientation=&quot;vertical&quot; android:padding=&quot;10dp&quot;&gt; &lt;ImageButton android:id=&quot;@+id/btn_collection&quot; android:layout_width=&quot;80dp&quot; android:layout_height=&quot;80dp&quot; android:background=&quot;@mipmap/sample_off&quot; /&gt; &lt;TextView android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:text=&quot;采集&quot; /&gt; &lt;/LinearLayout&gt; &lt;LinearLayout android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:gravity=&quot;center&quot; android:orientation=&quot;vertical&quot; android:padding=&quot;10dp&quot;&gt; &lt;ImageButton android:id=&quot;@+id/btn_train&quot; android:layout_width=&quot;80dp&quot; android:layout_height=&quot;80dp&quot; android:background=&quot;@mipmap/train_off&quot; /&gt; &lt;TextView android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:text=&quot;训练&quot; /&gt; &lt;/LinearLayout&gt; &lt;LinearLayout android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:gravity=&quot;center&quot; android:orientation=&quot;vertical&quot; android:padding=&quot;10dp&quot;&gt; &lt;ImageButton android:id=&quot;@+id/btn_understand&quot; android:layout_width=&quot;80dp&quot; android:layout_height=&quot;80dp&quot; android:background=&quot;@mipmap/test_off&quot; /&gt; &lt;TextView android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:text=&quot;识别&quot; /&gt; &lt;/LinearLayout&gt; &lt;/LinearLayout&gt; &lt;LinearLayout android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:layout_gravity=&quot;center&quot;&gt; &lt;ImageView android:id=&quot;@+id/iv_still&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:background=&quot;@mipmap/gait_still_off&quot; /&gt; &lt;ImageView android:id=&quot;@+id/iv_walk&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:background=&quot;@mipmap/gait_walk_off&quot; /&gt; &lt;ImageView android:id=&quot;@+id/iv_run&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:background=&quot;@mipmap/gait_run_off&quot; /&gt; &lt;/LinearLayout&gt; &lt;Button android:id=&quot;@+id/btn_delete&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:layout_gravity=&quot;center_horizontal&quot; android:text=&quot;清空目录&quot; android:textSize=&quot;20sp&quot; /&gt; &lt;/LinearLayout&gt; 8. 逻辑代码package cn.zhaoliang5156.svmprjo import android.content.Context import android.hardware.Sensor import android.hardware.SensorEvent import android.hardware.SensorEventListener import android.hardware.SensorManager import android.support.v7.app.AppCompatActivity import android.os.Bundle import cn.zhaoliang5156.svmprjo.svm.svm_predict import cn.zhaoliang5156.svmprjo.svm.svm_scale import cn.zhaoliang5156.svmprjo.svm.svm_train import cn.zhaoliang5156.svmprjo.util.Util import kotlinx.android.synthetic.main.activity_main.* import org.jetbrains.anko.doAsync import org.jetbrains.anko.toast import java.io.* /** * 步态分析 */ class MainActivity : AppCompatActivity() { lateinit var mSensorManager: SensorManager // 传感器管理类 lateinit var mAccSensor: Sensor // 传感器 var mHz = (1000.0 * 1000.0 / 32).toInt() // 拿数据的时间 var lable = 0 // 要写入文件的lable标记 var trainNum = 0 // 采集样本数量 var currentCollectionTrainNum = 0 // 当前采集样本数据 var isStartCollection = false // 是否开始采集的标记 var isStartUnderStand: Boolean = false // 采集的加速度监听器类 val sensorListener: SensorEventListener = object : SensorEventListener { var accArr = DoubleArray(128) var currentIndex = 0 override fun onSensorChanged(event: SensorEvent) { var x = event.values[0] var y = event.values[1] var z = event.values[2] val sqrt = Math.sqrt((x * x + y * y + z * z).toDouble()) tv_acc.text = &quot;${sqrt}&quot; // 当不够128个数据的时候继续收集数据，够128个数据的时候写入文件 if (currentIndex &gt;= 128) { val features = Util.dataToFeatures(accArr, mHz) if (isStartCollection) { // 如果是开始收集数据走到这里，就存起来 Util.writeToFile(&quot;${filesDir}/train&quot;, lable, features) currentCollectionTrainNum++ tv_collection_num.text = currentCollectionTrainNum.toString() if (currentCollectionTrainNum &gt;= trainNum) { // 已经采集够了 collection(isStartCollection) currentCollectionTrainNum = 0 tv_collection_num.text = &quot;已经采集:${currentCollectionTrainNum}&quot; } } else { // 否则则是识别 val code = Util.predictUnScaleData(features) result(code.toInt()) } currentIndex = 0 } else { accArr[currentIndex++] = sqrt } } override fun onAccuracyChanged(sensor: Sensor, accuracy: Int) {} } override fun onCreate(savedInstanceState: Bundle?) { super.onCreate(savedInstanceState) setContentView(R.layout.activity_main) // 选择采集样本数量 rg_train_num.setOnCheckedChangeListener { radioGroup, i -&gt; when (i) { R.id.rb_train_num_one -&gt; trainNum = 30 R.id.rb_train_num_two -&gt; trainNum = 50 R.id.rb_train_num_three -&gt; trainNum = 100 } tv_train_num.text = &quot;采集样本数量${trainNum}&quot; } rg_train_num.check(R.id.rb_train_num_one) // 设置默认选中30 // 选中标记lable rg_lable.setOnCheckedChangeListener { radioGroup, i -&gt; when (i) { R.id.rb_lable_one -&gt; lable = 0 R.id.rb_lable_two -&gt; lable = 1 R.id.rb_lable_three -&gt; lable = 2 } tv_lable.text = &quot;lable:${lable}&quot; } rg_lable.check(R.id.rb_lable_one) mSensorManager = getSystemService(Context.SENSOR_SERVICE) as SensorManager // 获取传感器管理类 mAccSensor = mSensorManager.getDefaultSensor(Sensor.TYPE_ACCELEROMETER) // 获取加速度传感器 btn_collection.setOnClickListener { collection(isStartCollection) } // 开始训练按钮点击调用 btn_train.setOnClickListener { btn_train.setBackgroundResource(R.mipmap.train) doAsync { createScaleFile(arrayOf(&quot;-l&quot;, &quot;0&quot;, &quot;-u&quot;, &quot;1&quot;, &quot;-s&quot;, &quot;${filesDir}/range&quot;, &quot;${filesDir}/train&quot;)) createModelFile(arrayOf(&quot;-s&quot;, &quot;0&quot;, &quot;-c&quot;, &quot;128.0&quot;, &quot;-t&quot;, &quot;2&quot;, &quot;-g&quot;, &quot;8.0&quot;, &quot;-e&quot;, &quot;0.1&quot;, &quot;${filesDir}/scale&quot;, &quot;${filesDir}/model&quot;)) createPredictFile(arrayOf(&quot;${filesDir}/scale&quot;, &quot;${filesDir}/model&quot;, &quot;${filesDir}/predict&quot;)) runOnUiThread { var reader: BufferedReader = BufferedReader(InputStreamReader(FileInputStream(&quot;${filesDir}/accuracy&quot;))) val line = reader.readLine() tv_accuracy.text = line.replace(&quot;Accuracy&quot;, &quot;准确率&quot;) btn_train.setBackgroundResource(R.mipmap.train_off) } } } // 开始识别按钮点击调用 btn_understand.setOnClickListener { understand(isStartUnderStand) } // 删除文件 btn_delete.setOnClickListener { doAsync { val file = File(&quot;${filesDir}&quot;) for (item in file.list()) { File(&quot;${filesDir}/${item}&quot;).delete() } runOnUiThread { toast(&quot;删除成功！&quot;) } } } } /** * 创建归一化文件 */ fun createScaleFile(args: Array&lt;String&gt;) { val out = System.out var outScaleFile = PrintStream(&quot;${filesDir}/scale&quot;) System.setOut(outScaleFile) svm_scale.main(args) System.setOut(out) } /** * 创建model文件 */ fun createModelFile(args: Array&lt;String&gt;) { svm_train.main(args) } /** * 创建Predict文件 */ fun createPredictFile(args: Array&lt;String&gt;) { val out = System.out var outAccuracy = PrintStream(&quot;${filesDir}/accuracy&quot;) System.setOut(outAccuracy) svm_predict.main(args) System.setOut(out) } /** * 采集数据 */ private fun collection(b: Boolean) { if (!b) { // 开始采集 mSensorManager.registerListener(sensorListener, mAccSensor, mHz) btn_collection.setBackgroundResource(R.mipmap.sample) } else { // 停止采集 mSensorManager.unregisterListener(sensorListener) btn_collection.setBackgroundResource(R.mipmap.sample_off) } isStartCollection = !isStartCollection } /** * 识别结果 */ private fun understand(b: Boolean) { if (!b) { // 开始识别 Util.loadFile(&quot;${filesDir}/range&quot;, &quot;${filesDir}/model&quot;) mSensorManager.registerListener(sensorListener, mAccSensor, mHz) btn_understand.setBackgroundResource(R.mipmap.test) } else { // 停止识别 mSensorManager.unregisterListener(sensorListener) btn_understand.setBackgroundResource(R.mipmap.test_off) result(-1) } isStartUnderStand = !isStartUnderStand } fun result(code: Int) { iv_still.setBackgroundResource(R.mipmap.gait_still_off) iv_walk.setBackgroundResource(R.mipmap.gait_walk_off) iv_run.setBackgroundResource(R.mipmap.gait_run_off) when (code) { 0 -&gt; iv_still.setBackgroundResource(R.mipmap.gait_still) 1 -&gt; iv_walk.setBackgroundResource(R.mipmap.gait_walk) 2 -&gt; iv_run.setBackgroundResource(R.mipmap.gait_run) } } }","tags":[]},{"title":"1.Android开发","date":"2017-06-21T03:12:27.000Z","path":"2017/06/21/0-Android开发/","text":"需求：我要做一个app，把学习、开发中使用到的内容集成到这个app中然后写成博客，我会把项目开源到Github上并不断完善。目前我把项目分成四个模块：基础知识、常用框架、自定义控件、其他。下面开始开发！ 产品设计 Splash 展示一个旋转的X 在X下边有一个Power By ZhaoLiang的字样。这就是我的Splash设计 Main 顶部展示一个标题 中间区域使用ViewPager显示内容 内容下方放一个广告栏 底部使用RadioGroup+RadioButton实现导航 基础知识页面设计 常用框架页面设计 自定义控件界面设计 其他界面设计 Splash开发主界面开发基础知识模块页面开发常用控件模块页面开发自定义控件模块页面开发其他模块页面开发","tags":[{"name":"框架搭建","slug":"框架搭建","permalink":"http://zhaoliang.cn/tags/框架搭建/"},{"name":"Android","slug":"Android","permalink":"http://zhaoliang.cn/tags/Android/"},{"name":"学习","slug":"学习","permalink":"http://zhaoliang.cn/tags/学习/"},{"name":"开发","slug":"开发","permalink":"http://zhaoliang.cn/tags/开发/"},{"name":"Android基础知识","slug":"Android基础知识","permalink":"http://zhaoliang.cn/tags/Android基础知识/"},{"name":"QucikStart","slug":"QucikStart","permalink":"http://zhaoliang.cn/tags/QucikStart/"},{"name":"UI","slug":"UI","permalink":"http://zhaoliang.cn/tags/UI/"},{"name":"四大组件","slug":"四大组件","permalink":"http://zhaoliang.cn/tags/四大组件/"},{"name":"Activity","slug":"Activity","permalink":"http://zhaoliang.cn/tags/Activity/"},{"name":"Service","slug":"Service","permalink":"http://zhaoliang.cn/tags/Service/"},{"name":"ContentProvider","slug":"ContentProvider","permalink":"http://zhaoliang.cn/tags/ContentProvider/"},{"name":"BroadCast","slug":"BroadCast","permalink":"http://zhaoliang.cn/tags/BroadCast/"},{"name":"Handler","slug":"Handler","permalink":"http://zhaoliang.cn/tags/Handler/"},{"name":"AsyncTask","slug":"AsyncTask","permalink":"http://zhaoliang.cn/tags/AsyncTask/"},{"name":"Animation","slug":"Animation","permalink":"http://zhaoliang.cn/tags/Animation/"},{"name":"动画","slug":"动画","permalink":"http://zhaoliang.cn/tags/动画/"},{"name":"多媒体","slug":"多媒体","permalink":"http://zhaoliang.cn/tags/多媒体/"},{"name":"Android常用框架","slug":"Android常用框架","permalink":"http://zhaoliang.cn/tags/Android常用框架/"},{"name":"自定义控件","slug":"自定义控件","permalink":"http://zhaoliang.cn/tags/自定义控件/"}]},{"title":"Apis","date":"2017-06-20T02:22:10.000Z","path":"2017/06/20/Apis/","text":"一些有用的Apis1.http://jsonplaceholder.typicode.com/","tags":[]},{"title":"如何解决问题","date":"2017-06-18T07:59:13.000Z","path":"2017/06/18/如何解决问题/","text":"开发中如何解决问题 官方文档 搜索引擎 google，bing，so.com,百度 技术交流论坛 技术文档平台 stackoverflow 源码分享网站 Github，OSChina","tags":[]},{"title":"9.IOS混合编程","date":"2017-06-18T02:50:47.000Z","path":"2017/06/18/9-IOS混合编程/","text":"","tags":[]},{"title":"8.IOS网络与通信","date":"2017-06-18T02:50:35.000Z","path":"2017/06/18/8-IOS网络与通信/","text":"","tags":[]},{"title":"7.IOS多媒体","date":"2017-06-18T02:50:12.000Z","path":"2017/06/18/7-IOS多媒体/","text":"","tags":[]},{"title":"6.IOS数据存储","date":"2017-06-18T02:49:53.000Z","path":"2017/06/18/6-IOS数据存储/","text":"Sandbox（IOS应用沙盒）","tags":[]},{"title":"5.IOS系统功能","date":"2017-06-18T02:49:38.000Z","path":"2017/06/18/5-IOS系统功能/","text":"","tags":[]},{"title":"4.IOS界面优化","date":"2017-06-18T02:49:23.000Z","path":"2017/06/18/4-IOS界面优化/","text":"","tags":[]},{"title":"3.IOS用户界面","date":"2017-06-18T02:49:02.000Z","path":"2017/06/18/3-IOS用户界面/","text":"","tags":[]},{"title":"2.Swift编程语言","date":"2017-06-18T02:48:47.000Z","path":"2017/06/18/2-Swift编程语言/","text":"","tags":[]},{"title":"1.IOS快速入门","date":"2017-06-18T02:48:15.000Z","path":"2017/06/18/1-IOS快速入门/","text":"IOS开发快速入门1. 环境安装在App Store 中搜索XCode 获取安装 2. 使用XCode创建项目使用XCode创建Single View Application。XCode不仅可以创建IOS应用也可以创建watchOS、tvOS、macOS等系统应用，创建这些项目开始都差不多，可以自己尝试一下。 3. 使用模拟器运行程序模拟器是个好东西，可以模拟不同屏幕版本的IPhone手机，我们可以使用模拟器测试我们开发的项目 4. 将程序发布到App Store将程序发布到App Store中让更多人使用我们的应用，这个步骤我们就要交钱了，苹果个人开发者账号每年99美刀，企业开发账号每年299美刀。呵呵，这个过程大家自己注册去缴费就可以啦。","tags":[]},{"title":"1.豆瓣FM","date":"2017-06-18T02:47:54.000Z","path":"2017/06/18/1-豆瓣FM/","text":"","tags":[]},{"title":"11.Map","date":"2017-06-16T09:27:33.000Z","path":"2017/06/16/11.Map/","text":"","tags":[]},{"title":"10.Location And Sensor","date":"2017-06-16T09:27:04.000Z","path":"2017/06/16/10.Location-And-Sensor/","text":"","tags":[]},{"title":"9.Media","date":"2017-06-16T09:26:33.000Z","path":"2017/06/16/9.Media/","text":"","tags":[]},{"title":"8.Animation","date":"2017-06-16T09:26:15.000Z","path":"2017/06/16/8.Animation/","text":"","tags":[]},{"title":"7.ContentProvider","date":"2017-06-16T09:25:47.000Z","path":"2017/06/16/7.ContentProvider/","text":"","tags":[]},{"title":"6.BroadCast","date":"2017-06-16T09:25:22.000Z","path":"2017/06/16/6.BroadCast/","text":"","tags":[]},{"title":"5.Service","date":"2017-06-16T09:25:06.000Z","path":"2017/06/16/5.Service/","text":"","tags":[]},{"title":"4.Activity","date":"2017-06-16T09:24:47.000Z","path":"2017/06/16/4.Activity/","text":"","tags":[]},{"title":"3.Android Storage","date":"2017-06-16T09:24:28.000Z","path":"2017/06/16/3.Android-Storage/","text":"","tags":[]},{"title":"2.Android UI","date":"2017-06-16T09:24:00.000Z","path":"2017/06/16/2.Android-UI/","text":"","tags":[]},{"title":"1.Android Quick Start","date":"2017-06-16T09:21:00.000Z","path":"2017/06/16/1.Android-Quick-Start/","text":"Android开发快速入门Demos，这些列子都是在0.Develop Android App的项目基础上建立的.源码 1. 快速入门主界面列表 布局文件和Kotlin代码如下： &lt;!-- 列表界面布局 --&gt; &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; &lt;FrameLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; xmlns:tools=&quot;http://schemas.android.com/tools&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot;&gt; &lt;ListView android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; android:id=&quot;@+id/list_view&quot;/&gt; &lt;/FrameLayout&gt; package com.example.zhaoliang.learnandroid.activities.quickstart import android.content.Intent import android.os.Bundle import android.view.View import android.widget.AdapterView import com.example.zhaoliang.learnandroid.R import com.example.zhaoliang.learnandroid.activities.base.BaseListBackActivity import com.example.zhaoliang.learnandroid.activities.quickstart.ui.HelloWorldActivity import com.example.zhaoliang.learnandroid.activities.quickstart.ui.SimpleDownloadUIActivity /** * 需求：快速入门的一些列子，以后有新的demo直接在这里写 */ class QuickStartActivity : BaseListBackActivity() { override fun onCreate(savedInstanceState: Bundle?) { super.onCreate(savedInstanceState) // 设置标题 title = getString(R.string.quick_start_title) } /** * 列表项点击事件 */ override fun onItemClick(parent: AdapterView&lt;*&gt;?, view: View?, position: Int, id: Long) { when (position) { 0 -&gt; startActivity(Intent(this, HelloWorldActivity::class.java)) 1 -&gt; startActivity(Intent(this, SimpleDownloadUIActivity::class.java)) else -&gt; println(&quot;unkown&quot;) } } /** * 填充列表项数据 */ override fun fillData(): Array&lt;out String&gt;? { return resources.getStringArray(R.array.QucikStartDatas) } } 2. HelloWorld 布局文件和Kotlin代码如下： &lt;!-- HelloWorld布局 --&gt; &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; &lt;RelativeLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; xmlns:tools=&quot;http://schemas.android.com/tools&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; tools:context=&quot;com.example.zhaoliang.learnandroid.activities.quickstart.ui.HelloWorldActivity&quot;&gt; &lt;TextView android:id=&quot;@+id/textView&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:layout_centerInParent=&quot;true&quot; android:text=&quot;@string/quick_start_values1&quot; /&gt; &lt;/RelativeLayout&gt; package com.example.zhaoliang.learnandroid.activities.quickstart.ui import android.os.Bundle import com.example.zhaoliang.learnandroid.R import com.example.zhaoliang.learnandroid.activities.base.BaseActivity import com.example.zhaoliang.learnandroid.activities.base.BastBackActivity /** * 需求：在屏幕上显示HelloWorld */ class HelloWorldActivity : BastBackActivity() { override fun onCreate(savedInstanceState: Bundle?) { super.onCreate(savedInstanceState) setContentView(R.layout.activity_hello_world) // 设置标题 title = getString(R.string.quick_start_title1) } } 3. SimpleDownloadUI 布局文件和Kotlin代码如下： &lt;!-- SimpleDownloadUI布局 --&gt; &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; &lt;RelativeLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; xmlns:tools=&quot;http://schemas.android.com/tools&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; tools:context=&quot;com.example.zhaoliang.learnandroid.activities.quickstart.ui.SimpleDownloadUIActivity&quot;&gt; &lt;Button android:id=&quot;@+id/btnDownload&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:layout_centerInParent=&quot;true&quot; android:text=&quot;@string/qucik_start_values2&quot; /&gt; &lt;/RelativeLayout&gt; package com.example.zhaoliang.learnandroid.activities.quickstart.ui import android.os.Bundle import android.view.View import android.widget.Toast import com.example.zhaoliang.learnandroid.R import com.example.zhaoliang.learnandroid.activities.base.BaseActivity import com.example.zhaoliang.learnandroid.activities.base.BastBackActivity import kotlinx.android.synthetic.main.activity_simple_download_ui.* /** * 需求：简单的模拟下载界面,界面上有一个按钮，点击以后屏幕上弹出下载字样，同时按钮显示下载中。。。 */ class SimpleDownloadUIActivity : BastBackActivity(), View.OnClickListener { /** * 下载按钮点击事件 */ override fun onClick(v: View?) { // Toast Toast.makeText(this, getString(R.string.qucik_start_values2), Toast.LENGTH_SHORT).show() // 修改按钮文字 btnDownload.text = getString(R.string.quick_start_values3) } override fun onCreate(savedInstanceState: Bundle?) { super.onCreate(savedInstanceState) setContentView(R.layout.activity_simple_download_ui) // 设置标题 title = getString(R.string.quick_start_title2) // 给下载按钮设置点击事件 btnDownload.setOnClickListener(this) } }","tags":[{"name":"Android, HelloWorld, QuickStart, Kotlin","slug":"Android-HelloWorld-QuickStart-Kotlin","permalink":"http://zhaoliang.cn/tags/Android-HelloWorld-QuickStart-Kotlin/"}]}]